{"version":3,"file":"static/chunks/704.d96b6b89763ad232.js","mappings":"onGA2DA,IAAMA,EAA0BC,EAAAA,IAAU,CAAC,WACzCC,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,eACjB,IAAMC,EAAkCC,CAAAA,EAAAA,EAAAA,EAAAA,IAAjCD,6BAAAA,CAEDE,EAAcL,EAAAA,UAAgB,CAACM,EAAAA,CAAmBA,EAAjDD,SAAAA,CACDE,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,EAGlBC,EAAmC,CACnCC,4BAA6B,EAC/B,GAEMC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BL,EAAaM,EAAAA,EAAeA,EACrEC,EAASP,EAARO,IAAAA,CAEDC,EAAuBD,EAC3BX,EACE,GAAAa,EAAAC,GAAA,EAACC,kBAAAA,CACCC,eAAgBL,EAAKM,QAAQ,CAACC,IAAI,CAClCC,OAAQR,EAAKM,QAAQ,CAACG,iBAAiB,CACvCC,WAAYV,EAAKM,QAAQ,CAACK,yBAAyB,CACnDC,QAASnB,EAAYmB,OAAO,GAG9B,GAAAV,EAAAC,GAAA,EAACU,EAAAA,EAAQA,CAAAA,CAACC,GAAG,YAGf,GAAAZ,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,EAAE,WACzB,GAAAf,EAAAC,GAAA,EAACe,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAIrB,MACE,GAAAjB,EAAAkB,IAAA,EAACC,EAAAA,CAAIA,CAAAA,WACH,GAAAnB,EAAAC,GAAA,EAACmB,EAAAA,CAAUA,CAAAA,CACTC,MAAO,GAAArB,EAAAC,GAAA,EAACqB,EAAAA,EAAOA,CAAAA,UAAEjC,IACjBkC,KAAM,GAAAvB,EAAAC,GAAA,EAACuB,EAAAA,CAAYA,CAAAA,CAACC,IAAI,cAAc9B,aAAcA,MAEtD,GAAAK,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,CAACC,OAAQ,EAAE,WACtB,GAAA3B,EAAAC,GAAA,EAAC2B,sBAAAA,CACCC,YAAa,CAAC,CAAC/B,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMM,QAAQ,CAAC0B,mBAAmB,EACjDC,eAAgBjC,MAAAA,EAAAA,KAAAA,EAAAA,EAAMM,QAAQ,CAAC2B,cAAc,KAGjD,GAAA/B,EAAAkB,IAAA,EAACL,EAAAA,CAAGA,CAAAA,WACF,GAAAb,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,GAAIiB,WAAY,EAAE,EAAGC,OAAO,0BACnD,GAAAjC,EAAAC,GAAA,EAACiC,EAAAA,EAAUA,CAAAA,UACT,GAAAlC,EAAAkB,IAAA,EAACL,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACC,WAAY,SAAUC,UAAW,MAAOC,IAAK,CAAC,YACxD,GAAAtC,EAAAC,GAAA,EAACsC,OAAAA,UAAK,gCACN,GAAAvC,EAAAC,GAAA,EAACuC,EAAAA,CAAGA,CAAAA,UAAC,wBAIVzC,OAIT,EAIA0C,CAAAA,EAAA,QAAe1D,EAiBf,IAAM6C,sBAAwB,SAAAc,CAAA,MAC5Bb,EAAAA,EAAAA,WAAAA,CACAE,EAAAA,EAAAA,cAAAA,CAKA,GAAI,CAACF,EACH,MACE,GAAA7B,EAAAkB,IAAA,EAAAlB,EAAA2C,QAAA,YACE,GAAA3C,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,GAAIiB,WAAY,EAAE,EAAGC,OAAO,kBACnD,GAAAjC,EAAAC,GAAA,EAACiC,EAAAA,EAAUA,CAAAA,UAAC,sBAEd,GAAAlC,EAAAkB,IAAA,EAAC0B,MAAAA,WAAI,oIAEwC,GAAA5C,EAAAC,GAAA,EAAC4C,EAAAA,EAAIA,CAAAA,UAAC,yBAA2B,WAAS,IACrF,GAAA7C,EAAAC,GAAA,EAAC4C,EAAAA,EAAIA,CAAAA,UAAC,iBAAmB,YAAU,IACnC,GAAA7C,EAAAC,GAAA,EAAC6C,IAAAA,CACCC,OAAO,SACPC,IAAI,aACJC,KAAK,oFACN,uCAEI,IAAI,8BAOjB,IAAMC,EACJ,GAAAlD,EAAAkB,IAAA,EAACL,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,GAAIiB,WAAY,EAAE,YAAG,iEACmB,IAC/D,GAAAhC,EAAAC,GAAA,EAAC6C,IAAAA,CACCC,OAAO,SACPC,IAAI,aACJC,KAAK,mHACN,kCAEI,IAAI,2BAKPE,EAAmBpB,EACvB,GAAA/B,EAAAC,GAAA,EAACmD,EAAAA,EAAgBA,CAAAA,UACf,GAAApD,EAAAkB,IAAA,EAACmC,QAAAA,WACC,GAAArD,EAAAkB,IAAA,EAACoC,KAAAA,WACC,GAAAtD,EAAAC,GAAA,EAACsD,KAAAA,UAAG,yBACJ,GAAAvD,EAAAC,GAAA,EAACsD,KAAAA,UACC,GAAAvD,EAAAC,GAAA,EAAC4C,EAAAA,EAAIA,CAAAA,UAAEd,EAAeyB,iBAAiB,QAG3C,GAAAxD,EAAAkB,IAAA,EAACoC,KAAAA,WACC,GAAAtD,EAAAC,GAAA,EAACsD,KAAAA,UAAG,4BACJ,GAAAvD,EAAAC,GAAA,EAACsD,KAAAA,UACExB,EAAe0B,wBAAwB,CACtC,GAAAzD,EAAAC,GAAA,EAACyD,EAAAA,CAAmBA,CAAAA,CAClBC,MAAO5B,EAAe0B,wBAAwB,CAC9CG,QAAS,CAACC,SAAU,GAAMC,YAAa,GAAMC,KAAM,MAAM,IAG3D,cAMR,KAEJ,MACE,GAAA/D,EAAAkB,IAAA,EAAAlB,EAAA2C,QAAA,YACE,GAAA3C,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,GAAIiB,WAAY,EAAE,EAAGC,OAAO,kBACnD,GAAAjC,EAAAC,GAAA,EAACiC,EAAAA,EAAUA,CAAAA,UAAC,sBAEbgB,EACAC,IAGP,EAEajD,kBAAoB,SAAAwC,CAAA,MAC/BvC,EAAAA,EAAAA,cAAAA,CACAK,EAAAA,EAAAA,UAAAA,CACAF,EAAAA,EAAAA,MAAAA,CACAI,EAAAA,EAAAA,OAAAA,CAO4B1B,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,MAAnCgF,EAAqBhF,CAAAA,CAAAA,EAAAA,CAAbiF,EAAajF,CAAAA,CAAAA,EAAAA,CACUA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAqBkF,KAAAA,GAAAA,GAAlEC,EAA+BnF,CAAAA,CAAAA,EAAAA,CAAlBoF,EAAkBpF,CAAAA,CAAAA,EAAAA,CAChCqF,EAAgCrF,EAAAA,WAAiB,CAAC,WACtDoF,EAAeF,KAAAA,EACjB,EAAG,CAACE,EAAe,EAEbE,EAAcC,OAAOC,WAAW,CACpClE,EAAOmE,GAAG,CAAC,SAAA/B,CAAA,QAAiC,CAA/BgC,EAAAA,cAAAA,CAAgBC,EAAAA,SAAAA,CAA0C,IAGnEC,MAAQ,WACZX,EAAU,CAACY,WAAY,KAAK,EAC9B,EACMC,OAAS,SAACJ,CAAAA,EACdT,EAAU,CAACY,WAAY,OAAQH,eAAAA,EAAgBK,iBAAkBT,CAAW,CAACI,EAAe,EAC9F,EACMM,SAAW,SAACN,CAAAA,EAChBT,EAAU,CAACY,WAAY,SAAUH,eAAAA,CAAc,EACjD,QAEA,CAAKlE,GAAcL,GAAkBA,EAAe8E,QAAQ,CAAC,yBAEzD,GAAAjF,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,YACX,GAAA1B,EAAAC,GAAA,EAACiF,EAAAA,CAAaA,CAAAA,CACZC,KAAK,QACL9D,MAAM,yBACN+D,YACE,yKAOC5E,CAAe,IAAfA,EAEP,GAAAR,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,YACX,GAAA1B,EAAAC,GAAA,EAACiF,EAAAA,CAAaA,CAAAA,CACZC,KAAK,QACL9D,MAAM,yBACN+D,YACE,sMAUR,GAAApF,EAAAkB,IAAA,EAAAlB,EAAA2C,QAAA,YACE,GAAA3C,EAAAkB,IAAA,EAACL,EAAAA,CAAGA,CAAAA,WACF,GAAAb,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACkD,eAAgB,UAAU,EAAGvE,QAAS,YAChD,GAAAd,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,UAAUJ,KAAM,GAAAnF,EAAAC,GAAA,EAACuF,EAAAA,EAAIA,CAAAA,CAACC,KAAK,eAAiBC,QAAS,kBAAMd,kBAAS,4BAIpFtE,IAAAA,EAAOqF,MAAM,CACZ,GAAA3F,EAAAC,GAAA,EAACiF,EAAAA,CAAaA,CAAAA,CACZC,KAAK,QACL9D,MAAM,wBACN+D,YACE,GAAApF,EAAAkB,IAAA,EAAAlB,EAAA2C,QAAA,YAAE,oEAEA,GAAA3C,EAAAC,GAAA,EAAC2F,EAAAA,CAAUA,CAAAA,CAACF,QAAS,kBAAMd,kBAAS,4BAAoC,SAK9E,GAAA5E,EAAAkB,IAAA,EAAC2E,EAAAA,CAAKA,CAAAA,WACJ,GAAA7F,EAAAC,GAAA,EAAC6F,QAAAA,UACC,GAAA9F,EAAAkB,IAAA,EAACoC,KAAAA,WACC,GAAAtD,EAAAC,GAAA,EAAC8F,KAAAA,CAAGC,MAAO,CAACC,MAAO,OAAO,WAAG,oBAC7B,GAAAjG,EAAAC,GAAA,EAAC8F,KAAAA,CAAGC,MAAO,CAACC,MAAO,KAAK,WAAG,gBAC3B,GAAAjG,EAAAC,GAAA,EAAC8F,KAAAA,CAAGC,MAAO,CAACC,MAAO,KAAK,WAAG,mBAC3B,GAAAjG,EAAAC,GAAA,EAAC8F,KAAAA,CAAGC,MAAO,CAACC,MAAO,KAAK,WAAG,kBAC3B,GAAAjG,EAAAC,GAAA,EAAC8F,KAAAA,CAAGC,MAAO,CAACC,MAAO,KAAK,WAAG,cAC3B,GAAAjG,EAAAC,GAAA,EAAC8F,KAAAA,CAAAA,QAGL,GAAA/F,EAAAC,GAAA,EAACoD,QAAAA,UACE/C,EAAOmE,GAAG,CAAC,SAACyB,CAAAA,QACX,GAAAlG,EAAAkB,IAAA,EAACoC,KAAAA,WACC,GAAAtD,EAAAC,GAAA,EAACsD,KAAAA,UAAI2C,EAAMxB,cAAc,GACzB,GAAA1E,EAAAC,GAAA,EAACsD,KAAAA,UAAI2C,EAAMvB,SAAS,GACpB,GAAA3E,EAAAC,GAAA,EAACsD,KAAAA,UAAI2C,EAAMC,YAAY,CAACC,MAAM,CAAC,SAACC,CAAAA,QAAM,CAAC,CAACA,EAAEC,iBAAiB,GAAEX,MAAM,GACnE,GAAA3F,EAAAC,GAAA,EAACsD,KAAAA,UAAI2C,EAAMC,YAAY,CAACC,MAAM,CAAC,SAACC,CAAAA,QAAM,CAACA,EAAEC,iBAAiB,GAAEX,MAAM,GAClE,GAAA3F,EAAAkB,IAAA,EAACqC,KAAAA,WACC,GAAAvD,EAAAC,GAAA,EAACsC,OAAAA,CAAKyD,MAAO,CAACO,YAAa,EAAE,WAAIL,EAAMC,YAAY,CAACR,MAAM,GAC1D,GAAA3F,EAAAC,GAAA,EAACuC,EAAAA,CAAGA,CAAAA,CAAC+C,OAAO,UAAUiB,YAAW,YAC/B,GAAAxG,EAAAC,GAAA,EAAC2F,EAAAA,CAAUA,CAAAA,CACTF,QAAS,WACPtB,EAAe8B,EAAMxB,cAAc,CACrC,WACD,kBAKL,GAAA1E,EAAAC,GAAA,EAACsD,KAAAA,UACC,GAAAvD,EAAAC,GAAA,EAACwG,2BAAAA,CACC/B,eAAgBwB,EAAMxB,cAAc,CACpCI,OAAQA,OACRE,SAAUA,eArBPkB,EAAMxB,cAAc,YA8BvC,GAAA1E,EAAAC,GAAA,EAACyG,0BAAAA,CACCC,KAAM3C,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQa,UAAU,IAAK,MAC7B+B,QAAS,kBAAM3C,EAAUC,KAAAA,IACzB2C,WAAYnG,IAEd,GAAAV,EAAAC,GAAA,EAAC6G,6BAAAA,CACCpC,eAAgBV,GAAUA,WAAAA,EAAOa,UAAU,CAAgBb,EAAOU,cAAc,CAAG,GACnFiC,KAAM3C,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQa,UAAU,IAAK,SAC7B+B,QAAS,kBAAM3C,EAAUC,KAAAA,IACzB2C,WAAYnG,IAEd,GAAAV,EAAAC,GAAA,EAAC8G,2BAAAA,CACCJ,KAAM3C,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQa,UAAU,IAAK,OAC7B+B,QAAS,kBAAM3C,EAAUC,KAAAA,IACzB2C,WAAYnG,EACZgE,eAAgBV,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQa,UAAU,IAAK,OAASb,EAAOU,cAAc,CAAG,KAE1E,GAAA1E,EAAAC,GAAA,EAAC+G,uBAAAA,CACC3F,MACE,GAAArB,EAAAkB,IAAA,EAACqB,OAAAA,WAAK,yBACkB,GAAAvC,EAAAC,GAAA,EAACgH,SAAAA,UAAQ9C,OAGnCyC,QAASvC,EACTK,eAAgBP,EAChB+C,SAAUxG,MAIlB,EAEM+F,2BAA6B,SAAA/D,CAAA,MACjCgC,EAAAA,EAAAA,cAAAA,CACAM,EAAAA,EAAAA,QAAAA,CACAF,EAAAA,EAAAA,MAAAA,CAMA,MACE,GAAA9E,EAAAC,GAAA,EAACkH,EAAAA,CAAOA,CAAAA,CACNC,QACE,GAAApH,EAAAkB,IAAA,EAACmG,EAAAA,EAAIA,CAAAA,WACH,GAAArH,EAAAC,GAAA,EAACqH,EAAAA,EAAQA,CAAAA,CAACnC,KAAK,OAAOoC,KAAK,OAAO7B,QAAS,kBAAMZ,EAAOJ,MACxD,GAAA1E,EAAAC,GAAA,EAACqH,EAAAA,EAAQA,CAAAA,CACPnC,KAAK,SACLI,OAAO,SACPgC,KAAK,SACL7B,QAAS,kBAAMV,EAASN,SAI9B8C,SAAS,uBAET,GAAAxH,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACH,KAAM,GAAAnF,EAAAC,GAAA,EAACuF,EAAAA,EAAIA,CAAAA,CAACC,KAAK,mBAG/B,EAEMgC,aAAe,SAAC1C,CAAAA,EACpB,GAAI,CAACA,EACH,MAAO,GAET,IAAMpB,EAAQ+D,SAAS3C,SACvB,CAAI4C,MAAMhE,IAGNiE,OAAOjE,KAAWoB,EAAiB8C,IAAI,IAGpClE,EAAQ,GAAKA,EAAQ,GAC9B,EAEM+C,0BAA4B,SAAAhE,CAAA,QAChCiE,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,UAAAA,CAMwC7H,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAhD8I,EAAiC9I,CAAAA,CAAAA,EAAAA,CAAnB+I,EAAmB/I,CAAAA,CAAAA,EAAAA,CACJA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAA5CgJ,EAA6BhJ,CAAAA,CAAAA,EAAAA,CAAjBiJ,EAAiBjJ,CAAAA,CAAAA,EAAAA,CACJA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAxCkJ,EAAyBlJ,CAAAA,CAAAA,EAAAA,CAAfmJ,EAAenJ,CAAAA,CAAAA,EAAAA,CAEhCA,EAAAA,SAAe,CAAC,WACdiJ,EAAc,IACdE,EAAY,GACd,EAAG,CAACxB,EAAK,EAET,IAAOyB,EAAuBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAG5BC,GAAAA,EAH4BD,CAAAA,EAAAA,CAKxBE,KAAO,GAAAC,EAAAC,CAAA,oEAEX,OADAV,EAAgB,IAChB,GAAMK,EAAoB,CACxBM,UAAW,CAAChE,eAAgBwD,EAAUhC,MAAOwB,SAASM,EAAWH,IAAI,GAAG,CAC1E,kBAFAc,EAAAC,IAAA,GAGAb,EAAgB,IAChBlB,IACAD,UACF,+CAEA,MACE,GAAA5G,EAAAkB,IAAA,EAAC2H,EAAAA,EAAMA,CAAAA,CAACC,OAAQnC,EAAMtF,MAAM,wBAAwBuF,QAASA,YAC3D,GAAA5G,EAAAkB,IAAA,EAAC6H,EAAAA,EAAUA,CAAAA,WACT,GAAA/I,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,CAACC,OAAQ,CAAC,WAAG,qBAC1B,GAAA3B,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,CAACC,OAAQ,EAAE,WACtB,GAAA3B,EAAAC,GAAA,EAAC+I,EAAAA,EAASA,CAAAA,CACRrF,MAAOuE,GAAY,GACnBe,SAAU,SAACC,CAAAA,SAAMf,EAAYe,EAAEnG,MAAM,CAACY,KAAK,GAC3CwF,YAAY,sBAGhB,GAAAnJ,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,CAACC,OAAQ,CAAC,WAAG,gCAC1B,GAAA3B,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,UACF,GAAAb,EAAAC,GAAA,EAAC+I,EAAAA,EAASA,CAAAA,CACRrF,MAAOqE,GAAc,GACrBiB,SAAU,SAACC,CAAAA,SAAMjB,EAAciB,EAAEnG,MAAM,CAACY,KAAK,GAC7CwF,YAAY,kBAIlB,GAAAnJ,EAAAkB,IAAA,EAACkI,EAAAA,EAAYA,CAAAA,WACX,GAAApJ,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,OAAOG,QAASkB,WAAS,WAGxC,GAAA5G,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CACLC,OAAO,UACPG,QAAS6C,EACTc,SAAU,CAAC5B,aAAaO,EAAWH,IAAI,KAAO,CAACK,GAAYJ,WAE1DA,EAAe,YAAc,mBAKxC,EAEMf,2BAA6B,SAAArE,CAAA,QACjCgC,EAAAA,EAAAA,cAAAA,CACAiC,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,UAAAA,CAOwC7H,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAhD8I,EAAiC9I,CAAAA,CAAAA,EAAAA,CAAnB+I,EAAmB/I,CAAAA,CAAAA,EAAAA,CACJA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAA5CgJ,EAA6BhJ,CAAAA,CAAAA,EAAAA,CAAjBiJ,EAAiBjJ,CAAAA,CAAAA,EAAAA,CAEpCA,EAAAA,SAAe,CAAC,WACdiJ,EAAc,GAChB,EAAG,CAACtB,EAAK,EAET,IAAOyB,EAAuBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAG5BC,GAAAA,EAH4BD,CAAAA,EAAAA,CAKxBE,KAAO,GAAAC,EAAAC,CAAA,oEAEX,OADAV,EAAgB,IAChB,GAAMK,EAAoB,CACxBM,UAAW,CAAChE,eAAAA,EAAgBwB,MAAOwB,SAASM,EAAYH,IAAI,GAAG,CACjE,kBAFAc,EAAAC,IAAA,GAGAb,EAAgB,IAChBlB,IACAD,UACF,+CAEMvF,EACJ,GAAArB,EAAAkB,IAAA,EAAAlB,EAAA2C,QAAA,YAAE,QACK,GAAA3C,EAAAC,GAAA,EAAC4C,EAAAA,EAAIA,CAAAA,UAAE6B,OAIhB,MACE,GAAA1E,EAAAkB,IAAA,EAAC2H,EAAAA,EAAMA,CAAAA,CAACC,OAAQnC,EAAMtF,MAAOA,EAAOuF,QAASA,YAC3C,GAAA5G,EAAAkB,IAAA,EAAC6H,EAAAA,EAAUA,CAAAA,WACT,GAAA/I,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,CAACC,OAAQ,CAAC,WAAG,qBAC1B,GAAA3B,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,CAACC,OAAQ,EAAE,WACtB,GAAA3B,EAAAC,GAAA,EAACgH,SAAAA,UAAQvC,MAEX,GAAA1E,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACa,OAAQ,CAACC,OAAQ,CAAC,WAAG,gCAC1B,GAAA3B,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,UACF,GAAAb,EAAAC,GAAA,EAAC+I,EAAAA,EAASA,CAAAA,CACRrF,MAAOqE,GAAc,GACrBiB,SAAU,SAACC,CAAAA,SAAMjB,EAAciB,EAAEnG,MAAM,CAACY,KAAK,GAC7CwF,YAAY,kBAIlB,GAAAnJ,EAAAkB,IAAA,EAACkI,EAAAA,EAAYA,CAAAA,WACX,GAAApJ,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,OAAOG,QAASkB,WAAS,UAGvCkB,EACC,GAAA9H,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,UAAU8D,SAAQ,YAAC,gBAIlC,GAAArJ,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,UAAUG,QAAS6C,EAAMc,SAAU,CAAC5B,aAAaO,EAAWH,IAAI,aAAK,sBAO9F,EAEMf,6BAA+B,SAAApE,CAAA,QACnCgC,EAAAA,EAAAA,cAAAA,CACAiC,EAAAA,EAAAA,IAAAA,CACAC,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,UAAAA,CAOwC7H,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAC,OAAhD8I,EAAiC9I,CAAAA,CAAAA,EAAAA,CAAnB+I,EAAmB/I,CAAAA,CAAAA,EAAAA,CAEjCoJ,EAAuBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAG5BC,GAAAA,EAH4BD,CAAAA,EAAAA,CAKxBE,KAAO,GAAAC,EAAAC,CAAA,oEAEX,OADAV,EAAgB,IAChB,GAAMK,EAAoB,CACxBM,UAAW,CAAChE,eAAAA,EAAgBwB,MAAO,CAAC,CACtC,kBAFAyC,EAAAC,IAAA,GAGAb,EAAgB,IAChBlB,IACAD,UACF,+CAEMvF,EACJ,GAAArB,EAAAkB,IAAA,EAAAlB,EAAA2C,QAAA,YAAE,UACO,GAAA3C,EAAAC,GAAA,EAAC4C,EAAAA,EAAIA,CAAAA,UAAE6B,OAGlB,MACE,GAAA1E,EAAAkB,IAAA,EAAC2H,EAAAA,EAAMA,CAAAA,CAACC,OAAQnC,EAAMtF,MAAOA,EAAOuF,QAASA,YAC3C,GAAA5G,EAAAkB,IAAA,EAAC6H,EAAAA,EAAUA,CAAAA,WAAC,+BACoB,GAAA/I,EAAAC,GAAA,EAACgH,SAAAA,UAAQvC,IAAwB,OAEjE,GAAA1E,EAAAkB,IAAA,EAACkI,EAAAA,EAAYA,CAAAA,WACX,GAAApJ,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,OAAOG,QAASkB,WAAS,UAGvCkB,EACC,GAAA9H,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,SAAS8D,SAAQ,YAAC,gBAIjC,GAAArJ,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,SAASG,QAAS6C,WAAM,sBAOjD,EAEMe,sBAAwB,SAAA5G,CAAA,MAC5B6G,EAAAA,EAAAA,WAAAA,CACArC,EAAAA,EAAAA,QAAAA,CAKOsC,EAAanB,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAGlBoB,GAAAA,EAHkBpB,CAAAA,EAAAA,CAKpB,MACE,GAAArI,EAAAC,GAAA,EAACkH,EAAAA,CAAOA,CAAAA,CACNC,QACE,GAAApH,EAAAkB,IAAA,EAACmG,EAAAA,EAAIA,CAAAA,WACH,GAAArH,EAAAC,GAAA,EAACqH,EAAAA,EAAQA,CAAAA,CAEPnC,KAAK,SACLoC,KAAK,iCACL7B,QAAS,GAAA8C,EAAAC,CAAA,iBAIHiB,yDAHS,SAAMF,EAAU,CAC3Bd,UAAW,CAACiB,MAAOJ,EAAYI,KAAK,CAAEC,QAASL,EAAYK,OAAO,CACpE,gBACa,OAATF,CAAAA,EAAAA,EAHSd,IAAA,GAGJ9I,IAAI,GAAT4J,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAWG,oBAAoB,cAEjC,OADA3C,IACA,GAAM4C,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,CACtBvE,OAAQ,UACRJ,KAAM,yBACN4E,QAAS,wBACX,WAJApB,EAAAC,IAAA,gCAMJ,IAfI,+BAiBN,GAAA5I,EAAAC,GAAA,EAACqH,EAAAA,EAAQA,CAAAA,CAEPnC,KAAK,SACLoC,KAAK,qCACL7B,QAAS,GAAA8C,EAAAC,CAAA,iBAGHiB,yDAFJ,SAAMI,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,CAACC,QAAS,8BAA8B,WACnD,OADbpB,EAAAC,IAAA,GACa,GAAMY,EAAU,CAACd,UAAW,CAACiB,MAAOJ,EAAYI,KAAK,CAAC,gBACtD,OAATD,CAAAA,EAAAA,EADSd,IAAA,GACJ9I,IAAI,GAAT4J,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAWG,oBAAoB,cAEjC,OADA3C,IACA,GAAM4C,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,CACtBvE,OAAQ,UACRJ,KAAM,yBACN4E,QAAS,yBACX,WAJApB,EAAAC,IAAA,gCAMJ,IAdI,iCAkBVpB,SAAS,wBAET,GAAAxH,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAAC0E,UAAW,GAAAhK,EAAAC,GAAA,EAACuF,EAAAA,EAAIA,CAAAA,CAACC,KAAK,yBAAkB,aAGtD,EAEMuB,uBAAyB,SAAAtE,CAAA,MAC7BgC,EAAAA,EAAAA,cAAAA,CACAkC,EAAAA,EAAAA,OAAAA,CACAvF,EAAAA,EAAAA,KAAAA,CACA6F,EAAAA,EAAAA,QAAAA,CAOM3H,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,EAClByK,EACA,CACEvB,UAAW,CACThE,eAAgBA,GAAkB,EACpC,EACAwF,KAAM,CAACxF,CACT,GAEF9E,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BL,EAAaM,EAAAA,EAAeA,EACtD,IAAMC,EAASP,EAARO,IAAAA,CACDY,EAAU1B,EAAAA,WAAiB,CAAC,WAChCO,EAAYmB,OAAO,GACnBwG,GACF,EAAG,CAAC3H,EAAa2H,EAAS,EAE1B,MACE,GAAAlH,EAAAkB,IAAA,EAAC2H,EAAAA,EAAMA,CAAAA,CACLC,OAAQ,CAAC,CAACpE,EACVrD,MAAOA,EACPuF,QAASA,EACTZ,MAAO,CACLmE,SAAU,QACVC,SAAU,SACVnE,MAAO,OACPoE,UAAW,MACb,YAEA,GAAArK,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,EAAE,EAAGoB,KAAM,CAACmI,KAAM,CAAC,EAAGtE,MAAO,CAACuE,UAAW,MAAM,WACrE,EAKC,GAAAvK,EAAAC,GAAA,EAACuK,kBAAAA,CAAkBC,QAAS3K,EAAKM,QAAQ,CAAC2E,gBAAgB,CAAE2F,QAAShK,IAJrE,GAAAV,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,EAAE,WACzB,GAAAf,EAAAC,GAAA,EAACe,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,gBAMvB,GAAAjB,EAAAC,GAAA,EAACmJ,EAAAA,EAAYA,CAAAA,UACX,GAAApJ,EAAAC,GAAA,EAACqF,EAAAA,EAAMA,CAAAA,CAACC,OAAO,OAAOG,QAASkB,WAAS,cAMhD,EAEM4D,kBAAoB,SAAA9H,CAAA,MAmBtBnD,EAlBFkL,EAAAA,EAAAA,OAAAA,CACAC,EAAAA,EAAAA,OAAAA,CAKMC,EAAU,GAAAC,EAAAnC,CAAA,EAAG,IAAIoC,IAAIJ,EAAQtE,YAAY,CAAC1B,GAAG,CAAC,SAACqG,CAAAA,SAASA,EAAKnB,KAAK,KAClEpK,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,EAClBuL,EACA,CACErC,UAAW,CACTtC,OAAQ,CAACuE,OAAAA,CAAM,CACjB,EACAT,KAAM,CAACO,EAAQtE,YAAY,CAACR,MAAM,GAGhCqF,EAA2C,CAAC,EAKlDC,CAHE1L,CAAAA,OAAAA,CAAAA,EAAAA,EAAYO,IAAI,GAAhBP,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkB2L,mBAAmB,CAACC,UAAU,IAAK,OACjD5L,EAAYO,IAAI,CAACoL,mBAAmB,CAACE,OAAO,CAC5C,EAAE,EACHC,OAAO,CAAC,SAACC,CAAAA,EACZN,CAAa,CAACM,EAAIC,EAAE,CAAC,CAAGD,EAAIE,MAAM,GAGpC,IAAMC,EAAS,GAAAb,EAAAnC,CAAA,EAAGgC,EAAQtE,YAAY,EACtCsF,EAAMC,IAAI,CAAC,SAAC5I,CAAAA,CAAG6I,CAAAA,SACb,EAAMC,QAAQ,EAAID,EAAEC,QAAQ,EAAI9I,EAAE8I,QAAQ,GAAKD,EAAEC,QAAQ,CAChD9I,EAAE8I,QAAQ,CAAGD,EAAEC,QAAQ,CAEzB9I,EAAE+I,iBAAiB,CAAGF,EAAEE,iBAAiB,GAElD,IAAMC,EAAgBL,EAAMrF,MAAM,CAAC,SAAC0E,CAAAA,QAAS,CAAC,CAACA,EAAKxE,iBAAiB,GAC/DH,EAAesF,EAAMrF,MAAM,CAAC,SAAC0E,CAAAA,QAAS,CAACA,EAAKxE,iBAAiB,GAE7DyF,EACJ,GAAA/L,EAAAC,GAAA,EAAC6F,QAAAA,UACC,GAAA9F,EAAAkB,IAAA,EAACoC,KAAAA,WACC,GAAAtD,EAAAC,GAAA,EAAC8F,KAAAA,UAAG,WACJ,GAAA/F,EAAAC,GAAA,EAAC8F,KAAAA,UAAG,aACJ,GAAA/F,EAAAC,GAAA,EAAC8F,KAAAA,UAAG,aACJ,GAAA/F,EAAAC,GAAA,EAAC8F,KAAAA,UAAG,WACJ,GAAA/F,EAAAC,GAAA,EAAC8F,KAAAA,UACC,GAAA/F,EAAAkB,IAAA,EAACL,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACC,WAAY,SAAUC,UAAW,MAAOC,IAAK,CAAC,YAAG,WAE3D,GAAAtC,EAAAC,GAAA,EAAC+L,EAAAA,CAAOA,CAAAA,CACNC,UAAU,MACV7E,QAAQ,sIAER,GAAApH,EAAAC,GAAA,EAACuF,EAAAA,EAAIA,CAAAA,CAACC,KAAK,OAAOyG,MAAOC,EAAAA,CAAMA,CAACC,OAAO,UAI7C,GAAApM,EAAAC,GAAA,EAAC8F,KAAAA,CAAAA,eAKP,EAAWJ,MAAM,CAsBf,GAAA3F,EAAAkB,IAAA,EAAC2E,EAAAA,CAAKA,CAAAA,WACHkG,EACD,GAAA/L,EAAAC,GAAA,EAACoD,QAAAA,CAAM2C,MAAO,CAACqG,gBAAiBF,EAAAA,CAAMA,CAACG,QAAQ,WAC5CR,EAAcrH,GAAG,CAAC,SAACqG,CAAAA,QAClB,GAAA9K,EAAAC,GAAA,EAACsM,eAAAA,CAECzB,KAAMA,EACNE,cAAeA,EACf9D,SAAUwD,GAHLI,EAAKnB,KAAK,CAAGmB,EAAKlB,OAAO,MAOpC,GAAA5J,EAAAC,GAAA,EAACoD,QAAAA,UACE8C,EAAa1B,GAAG,CAAC,SAACqG,CAAAA,QACjB,GAAA9K,EAAAC,GAAA,EAACsM,eAAAA,CAECzB,KAAMA,EACNE,cAAeA,EACf9D,SAAUwD,GAHLI,EAAKnB,KAAK,CAAGmB,EAAKlB,OAAO,SAnCpC,GAAA5J,EAAAkB,IAAA,EAAC2E,EAAAA,CAAKA,CAAAA,WACHkG,EACD,GAAA/L,EAAAC,GAAA,EAACoD,QAAAA,UACC,GAAArD,EAAAC,GAAA,EAACqD,KAAAA,UACC,GAAAtD,EAAAC,GAAA,EAACsD,KAAAA,CAAGiJ,QAAS,WACX,GAAAxM,EAAAC,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CACFsB,KAAM,CAACC,WAAY,SAAUiD,eAAgB,QAAQ,EACrDW,MAAO,CAACkG,MAAOC,EAAAA,CAAMA,CAACC,OAAO,EAC7BtL,QAAS,YACV,2EAmCf,EAEMyL,eAAiB,SAAA7J,CAAA,MACrBoI,EAAAA,EAAAA,IAAAA,CACAE,EAAAA,EAAAA,aAAAA,CACA9D,EAAAA,EAAAA,QAAAA,CAMMuF,EAAYzB,CAAa,CAACF,EAAKnB,KAAK,CAAC,CAC3C,MACE,GAAA3J,EAAAkB,IAAA,EAACoC,KAAAA,WACC,GAAAtD,EAAAC,GAAA,EAACsD,KAAAA,UACEkJ,EACC,GAAAzM,EAAAC,GAAA,EAACyM,EAAAA,EAAIA,CAAAA,CAAC9L,GAAI,SAAoB+L,MAAA,CAAX7B,EAAKnB,KAAK,WAC3B,GAAA3J,EAAAkB,IAAA,EAACL,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACE,UAAW,MAAOD,WAAY,SAAUE,IAAK,CAAC,YACxD,GAAAtC,EAAAC,GAAA,EAAC2M,EAAAA,EAAYA,CAAAA,CAACpB,OAAQiB,EAAWI,KAAM,KACvC,GAAA7M,EAAAC,GAAA,EAAC4C,EAAAA,EAAIA,CAAAA,UAAEiK,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAACvB,GAAIT,EAAKnB,KAAK,KACjCoD,EAAAA,EAAcA,CAACC,GAAG,CAACP,GAClB,GAAAzM,EAAAC,GAAA,EAAC+L,EAAAA,CAAOA,CAAAA,CACNC,UAAU,MACV7E,QAAQ,gHAER,GAAApH,EAAAC,GAAA,EAACuF,EAAAA,EAAIA,CAAAA,CAACC,KAAK,OAAOyG,MAAOC,EAAAA,CAAMA,CAACC,OAAO,KAEvC,UAIR,GAAApM,EAAAC,GAAA,EAAC4C,EAAAA,EAAIA,CAAAA,UAAEiK,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAACvB,GAAIT,EAAKnB,KAAK,OAGtC,GAAA3J,EAAAC,GAAA,EAACsD,KAAAA,UACC,GAAAvD,EAAAC,GAAA,EAAC4C,EAAAA,EAAIA,CAAAA,UAAEiI,EAAKlB,OAAO,KAErB,GAAA5J,EAAAC,GAAA,EAACsD,KAAAA,UACEuH,EAAKxE,iBAAiB,CACrB,GAAAtG,EAAAC,GAAA,EAACgN,EAAAA,CAAWA,CAAAA,CAACC,UAAWpC,EAAKxE,iBAAiB,CAAE6G,QAAS,OAEzD,MAGJ,GAAAnN,EAAAC,GAAA,EAACsD,KAAAA,UACEuH,EAAKe,iBAAiB,CACrB,GAAA7L,EAAAC,GAAA,EAACgN,EAAAA,CAAWA,CAAAA,CAACC,UAAWpC,EAAKe,iBAAiB,CAAEsB,QAAS,OAEzD,MAGJ,GAAAnN,EAAAC,GAAA,EAACsD,KAAAA,UAAIuH,EAAKc,QAAQ,GAClB,GAAA5L,EAAAC,GAAA,EAACsD,KAAAA,UACC,GAAAvD,EAAAC,GAAA,EAACqJ,sBAAAA,CAAsBC,YAAauB,EAAM5D,SAAUA,QAI5D,EAEakG,EAA4BC,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,mBAS/BC,EAA6BD,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,mBAYzCD,GAESG,EAA4BF,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oBAO/B5N,EAAoC4N,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,mBAgBhDC,EACAC,GAGEjF,EAAiC+E,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oBAM7B5D,EAAkC4D,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,oBAM5CpD,EAAgCoD,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,mBASrCC,GAGEvC,EAAiCsC,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,qMCn8B7BG,EAAsBxO,EAAAA,IAAU,CAAC,WAC5C,IAAMyO,EAAYzO,EAAAA,UAAgB,CAAC0O,EAAAA,CAAuBA,EAAnDD,OAAAA,QAEP,EAKE,GAAAE,EAAA1N,GAAA,EAAC2N,EAAAA,CAAcA,CAAAA,CACbxG,QAASqG,EAAQrG,OAAO,CACxBI,SAAS,SACTqG,UAAW,CAACC,OAAQ,CAACC,QAAS,GAAMnK,QAAS,CAACkK,OAAQ,CAAC,EAAG,GAAG,CAAC,CAAC,WAE/D,GAAAH,EAAA1N,GAAA,EAACuF,EAAAA,EAAIA,CAAAA,CAACC,KAAK,UAAUyG,MAAOC,EAAAA,CAAMA,CAAC6B,SAAS,KATvC,IAYX,yBChBaC,EAAkBjP,EAAAA,IAAU,CAAC,SAAA0D,CAAA,MAAEyG,EAAAA,EAAAA,WAAAA,CACpC+E,EAAkBlP,EAAAA,UAAgB,CAAC0O,EAAAA,CAAuBA,EAAzDQ,aAAAA,QAEP,EAIIA,YAAAA,EAAcC,IAAI,CAElB,GAAAR,EAAA1N,GAAA,EAAC+L,EAAAA,CAAOA,CAAAA,CAAC5E,QAAS8G,EAAc9G,OAAO,CAAE6E,UAAU,kBACjD,GAAA0B,EAAA1N,GAAA,EAACe,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,YAAYmN,UAAWjC,EAAAA,CAAMA,CAACkC,OAAO,KAM1D,GAAAV,EAAA1N,GAAA,EAAC2N,EAAAA,CAAcA,CAAAA,CACbxG,QAAS8G,EAAc9G,OAAO,CAC9BI,SAAS,SACTqG,UAAW,CAACC,OAAQ,CAACC,QAAS,GAAMnK,QAAS,CAACkK,OAAQ,CAAC,EAAG,GAAG,CAAC,CAAC,WAE/D,GAAAH,EAAA1N,GAAA,EAACuF,EAAAA,EAAIA,CAAAA,CAACC,KAAK,UAAUyG,MAAOC,EAAAA,CAAMA,CAAC6B,SAAS,KAjBvC7E,EAAc,GAAAwE,EAAA1N,GAAA,EAAC2C,MAAAA,CAAIoD,MAAO,CAACC,MAAO,MAAM,IAAQ,IAoB3D,oCCZazE,aAAe,SAAoC8M,CAAAA,EAC9D,IAAO3O,EAAqB2O,EAArB3O,YAAAA,CAAc8B,EAAO6M,EAAP7M,GAAAA,CAEf8M,EAAgBvP,EAAAA,UAAgB,CAACM,EAAAA,CAAmBA,EAAnDiP,WAAAA,CACDC,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,IACftP,EAAkCC,CAAAA,EAAAA,EAAAA,EAAAA,IAAjCD,6BAAAA,CAEP,MACE,GAAAwO,EAAAzM,IAAA,EAACL,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACE,UAAW,MAAOgD,eAAgB,gBAAiBjD,WAAY,UAAU,YACnF,GAAAuL,EAAAzM,IAAA,EAACwN,EAAAA,EAAIA,CAAAA,CAACC,cAAelN,YACnB,GAAAkM,EAAA1N,GAAA,EAAC2O,EAAAA,CAAOA,CAAAA,CACNrD,GAAG,YACHlK,MAAM,iBACNT,GAAG,aACHuE,KAAM,GAAAwI,EAAA1N,GAAA,EAACgO,EAAeA,CAAC9E,YAAa,OAEtC,GAAAwE,EAAA1N,GAAA,EAAC2O,EAAAA,CAAOA,CAAAA,CAACrD,GAAG,SAASlK,MAAOkN,EAAa3N,GAAG,UAAUuE,KAAM,GAAAwI,EAAA1N,GAAA,EAACuN,EAAmBA,CAAAA,KAC/EgB,GAAgBrP,EACf,GAAAwO,EAAA1N,GAAA,EAAC2O,EAAAA,CAAOA,CAAAA,CAACrD,GAAG,cAAclK,MAAM,qBAAqBT,GAAG,iBACtD,KACH4N,EAAe,GAAAb,EAAA1N,GAAA,EAAC2O,EAAAA,CAAOA,CAAAA,CAACrD,GAAG,SAASlK,MAAM,gBAAgBT,GAAG,YAAe,QAE9EjB,EACC,GAAAgO,EAAA1N,GAAA,EAACY,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACa,OAAQ,CAAC,WACtB,GAAAgM,EAAA1N,GAAA,EAAC4O,EAAAA,EAAqBA,CAAAA,CAAClP,aAAcA,MAErC,OAGV,iSCzCO,IAAM8O,gBAAkB,WAC7B,IAAM3O,EAASN,CAAAA,EAAAA,EAAAA,CAAAA,EACbsP,GADKhP,IAAAA,CAGP,MAAO,CAAC,CAACA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMM,QAAQ,CAAC2O,OAAO,CACjC,EAEMD,EAA2BzB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA","sources":["webpack://_N_E/../ui-core/src/instance/InstanceConcurrency.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useQuery, useMutation} from '@apollo/client';\nimport {\n  Subheading,\n  MetadataTableWIP,\n  StyledRawCodeMirror,\n  PageHeader,\n  Heading,\n  Box,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  Mono,\n  Popover,\n  Spinner,\n  ButtonLink,\n  Table,\n  Tag,\n  TextInput,\n  Button,\n  NonIdealState,\n  Page,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link, Redirect} from 'react-router-dom';\n\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RunStatusDot} from '../runs/RunStatusDots';\nimport {failedStatuses} from '../runs/RunStatuses';\nimport {titleForRun} from '../runs/RunUtils';\nimport {TimeElapsed} from '../runs/TimeElapsed';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {\n  ConcurrencyKeyDetailsQuery,\n  ConcurrencyKeyDetailsQueryVariables,\n  ConcurrencyLimitFragment,\n  ConcurrencyStepFragment,\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  RunQueueConfigFragment,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n} from './types/InstanceConcurrency.types';\n\nconst InstanceConcurrencyPage = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  const opConcurrencyContent = data ? (\n    flagInstanceConcurrencyLimits ? (\n      <ConcurrencyLimits\n        instanceConfig={data.instance.info}\n        limits={data.instance.concurrencyLimits}\n        hasSupport={data.instance.supportsConcurrencyLimits}\n        refetch={queryResult.refetch}\n      />\n    ) : (\n      <Redirect to=\"/config\" />\n    )\n  ) : (\n    <Box padding={{vertical: 64}}>\n      <Spinner purpose=\"section\" />\n    </Box>\n  );\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" refreshState={refreshState} />}\n      />\n      <Box margin={{bottom: 64}}>\n        <RunConcurrencyContent\n          hasRunQueue={!!data?.instance.runQueuingSupported}\n          runQueueConfig={data?.instance.runQueueConfig}\n        />\n      </Box>\n      <Box>\n        <Box padding={{vertical: 16, horizontal: 24}} border=\"top-and-bottom\">\n          <Subheading>\n            <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n              <span>Global op/asset concurrency</span>\n              <Tag>Experimental</Tag>\n            </Box>\n          </Subheading>\n        </Box>\n        {opConcurrencyContent}\n      </Box>\n    </Page>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n      concurrencyLimit: number;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nconst RunConcurrencyContent = ({\n  hasRunQueue,\n  runQueueConfig,\n}: {\n  hasRunQueue: boolean;\n  runQueueConfig: RunQueueConfigFragment | null | undefined;\n}) => {\n  if (!hasRunQueue) {\n    return (\n      <>\n        <Box padding={{vertical: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Run concurrency</Subheading>\n        </Box>\n        <div>\n          Run concurrency is not supported with this run coordinator. To enable run concurrency\n          limits, configure your instance to use the <Mono>QueuedRunCoordinator</Mono> in your{' '}\n          <Mono>dagster.yaml</Mono>. See the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://docs.dagster.io/deployment/dagster-instance#queuedruncoordinator\"\n          >\n            QueuedRunCoordinator documentation\n          </a>{' '}\n          for more information.\n        </div>\n      </>\n    );\n  }\n\n  const info_content = (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      Run concurrency can be set in your run queue settings. See the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        href=\"https://docs.dagster.io/guides/limiting-concurrency-in-data-pipelines#configuring-run-level-concurrency\"\n      >\n        run concurrency documentation\n      </a>{' '}\n      for more information.\n    </Box>\n  );\n\n  const settings_content = runQueueConfig ? (\n    <MetadataTableWIP>\n      <tbody>\n        <tr>\n          <td>Max concurrent runs:</td>\n          <td>\n            <Mono>{runQueueConfig.maxConcurrentRuns}</Mono>\n          </td>\n        </tr>\n        <tr>\n          <td>Tag concurrency limits:</td>\n          <td>\n            {runQueueConfig.tagConcurrencyLimitsYaml ? (\n              <StyledRawCodeMirror\n                value={runQueueConfig.tagConcurrencyLimitsYaml}\n                options={{readOnly: true, lineNumbers: true, mode: 'yaml'}}\n              />\n            ) : (\n              '-'\n            )}\n          </td>\n        </tr>\n      </tbody>\n    </MetadataTableWIP>\n  ) : null;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"bottom\">\n        <Subheading>Run concurrency</Subheading>\n      </Box>\n      {info_content}\n      {settings_content}\n    </>\n  );\n};\n\nexport const ConcurrencyLimits = ({\n  instanceConfig,\n  hasSupport,\n  limits,\n  refetch,\n}: {\n  limits: ConcurrencyLimitFragment[];\n  refetch: () => void;\n  instanceConfig?: string | null;\n  hasSupport?: boolean;\n}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const [selectedKey, setSelectedKey] = React.useState<string | undefined>(undefined);\n  const onConcurrencyStepsDialogClose = React.useCallback(() => {\n    setSelectedKey(undefined);\n  }, [setSelectedKey]);\n\n  const limitsByKey = Object.fromEntries(\n    limits.map(({concurrencyKey, slotCount}) => [concurrencyKey, slotCount]),\n  );\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey, concurrencyLimit: limitsByKey[concurrencyKey]!});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  if (!hasSupport && instanceConfig && instanceConfig.includes('SqliteEventLogStorage')) {\n    return (\n      <Box margin={24}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No concurrency support\"\n          description={\n            'This instance does not support global concurrency limits. You will need to ' +\n            'configure a different storage implementation (e.g. Postgres/MySQL) to use this ' +\n            'feature.'\n          }\n        />\n      </Box>\n    );\n  } else if (hasSupport === false) {\n    return (\n      <Box margin={24}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No concurrency support\"\n          description={\n            'This instance does not currently support global concurrency limits. You may need to ' +\n            'run `dagster instance migrate` to add the necessary tables to your dagster storage ' +\n            'to support this feature.'\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Box>\n        <Box flex={{justifyContent: 'flex-end'}} padding={16}>\n          <Button intent=\"primary\" icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n            Add concurrency limit\n          </Button>\n        </Box>\n        {limits.length === 0 ? (\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        ) : (\n          <Table>\n            <thead>\n              <tr>\n                <th style={{width: '260px'}}>Concurrency key</th>\n                <th style={{width: '20%'}}>Total slots</th>\n                <th style={{width: '20%'}}>Assigned steps</th>\n                <th style={{width: '20%'}}>Pending steps</th>\n                <th style={{width: '20%'}}>All steps</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {limits.map((limit) => (\n                <tr key={limit.concurrencyKey}>\n                  <td>{limit.concurrencyKey}</td>\n                  <td>{limit.slotCount}</td>\n                  <td>{limit.pendingSteps.filter((x) => !!x.assignedTimestamp).length}</td>\n                  <td>{limit.pendingSteps.filter((x) => !x.assignedTimestamp).length}</td>\n                  <td>\n                    <span style={{marginRight: 16}}>{limit.pendingSteps.length}</span>\n                    <Tag intent=\"primary\" interactive>\n                      <ButtonLink\n                        onClick={() => {\n                          setSelectedKey(limit.concurrencyKey);\n                        }}\n                      >\n                        View all\n                      </ButtonLink>\n                    </Tag>\n                  </td>\n                  <td>\n                    <ConcurrencyLimitActionMenu\n                      concurrencyKey={limit.concurrencyKey}\n                      onEdit={onEdit}\n                      onDelete={onDelete}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Box>\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n      />\n      <ConcurrencyStepsDialog\n        title={\n          <span>\n            Concurrency steps for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onConcurrencyStepsDialogClose}\n        concurrencyKey={selectedKey}\n        onUpdate={refetch}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitActionMenu = ({\n  concurrencyKey,\n  onDelete,\n  onEdit,\n}: {\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst isValidLimit = (concurrencyLimit?: string) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value > 0 && value < 1000;\n};\n\nconst AddConcurrencyLimitDialog = ({\n  open,\n  onClose,\n  onComplete,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={!isValidLimit(limitInput.trim()) || !keyInput || isSubmitting}\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button intent=\"primary\" onClick={save} disabled={!isValidLimit(limitInput.trim())}>\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: 0},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyActionMenu = ({\n  pendingStep,\n  onUpdate,\n}: {\n  pendingStep: ConcurrencyStepFragment;\n  onUpdate: () => void;\n}) => {\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem\n            key=\"free-concurrency-slots-step\"\n            icon=\"status\"\n            text=\"Free concurrency slot for step\"\n            onClick={async () => {\n              const resp = await freeSlots({\n                variables: {runId: pendingStep.runId, stepKey: pendingStep.stepKey},\n              });\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slot',\n                });\n              }\n            }}\n          />\n          <MenuItem\n            key=\"free-concurrency-slots-run\"\n            icon=\"status\"\n            text=\"Free all concurrency slots for run\"\n            onClick={async () => {\n              await showSharedToaster({message: 'Freeing concurrency slots...'});\n              const resp = await freeSlots({variables: {runId: pendingStep.runId}});\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slots',\n                });\n              }\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button rightIcon={<Icon name=\"expand_more\" />}>Actions</Button>\n    </Popover>\n  );\n};\n\nconst ConcurrencyStepsDialog = ({\n  concurrencyKey,\n  onClose,\n  title,\n  onUpdate,\n}: {\n  concurrencyKey?: string;\n  title: string | React.ReactNode;\n  onClose: () => void;\n  onUpdate: () => void;\n}) => {\n  const queryResult = useQuery<ConcurrencyKeyDetailsQuery, ConcurrencyKeyDetailsQueryVariables>(\n    CONCURRENCY_KEY_DETAILS_QUERY,\n    {\n      variables: {\n        concurrencyKey: concurrencyKey || '',\n      },\n      skip: !concurrencyKey,\n    },\n  );\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const refetch = React.useCallback(() => {\n    queryResult.refetch();\n    onUpdate();\n  }, [queryResult, onUpdate]);\n\n  return (\n    <Dialog\n      isOpen={!!concurrencyKey}\n      title={title}\n      onClose={onClose}\n      style={{\n        minWidth: '400px',\n        maxWidth: '1000px',\n        width: '90vw',\n        maxHeight: '90vh',\n      }}\n    >\n      <Box padding={{vertical: 16}} flex={{grow: 1}} style={{overflowY: 'auto'}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : (\n          <PendingStepsTable keyInfo={data.instance.concurrencyLimit} refresh={refetch} />\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst PendingStepsTable = ({\n  keyInfo,\n  refresh,\n}: {\n  keyInfo: ConcurrencyLimitFragment;\n  refresh: () => void;\n}) => {\n  const runIds = [...new Set(keyInfo.pendingSteps.map((step) => step.runId))];\n  const queryResult = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        filter: {runIds},\n      },\n      skip: !keyInfo.pendingSteps.length,\n    },\n  );\n  const statusByRunId: {[id: string]: RunStatus} = {};\n  const runs =\n    queryResult.data?.pipelineRunsOrError.__typename === 'Runs'\n      ? queryResult.data.pipelineRunsOrError.results\n      : [];\n  runs.forEach((run) => {\n    statusByRunId[run.id] = run.status;\n  });\n\n  const steps = [...keyInfo.pendingSteps];\n  steps.sort((a, b) => {\n    if (a.priority && b.priority && a.priority !== b.priority) {\n      return a.priority - b.priority;\n    }\n    return a.enqueuedTimestamp - b.enqueuedTimestamp;\n  });\n  const assignedSteps = steps.filter((step) => !!step.assignedTimestamp);\n  const pendingSteps = steps.filter((step) => !step.assignedTimestamp);\n\n  const tableHeader = (\n    <thead>\n      <tr>\n        <th>Run ID</th>\n        <th>Step key</th>\n        <th>Assigned</th>\n        <th>Queued</th>\n        <th>\n          <Box flex={{alignItems: 'center', direction: 'row', gap: 4}}>\n            Priority\n            <Tooltip\n              placement=\"top\"\n              content=\"Priority can be set on each op/asset using the 'dagster/priority' tag. Higher priority steps will be assigned slots first.\"\n            >\n              <Icon name=\"info\" color={Colors.Gray500} />\n            </Tooltip>\n          </Box>\n        </th>\n        <th></th>\n      </tr>\n    </thead>\n  );\n\n  if (!steps.length) {\n    return (\n      <Table>\n        {tableHeader}\n        <tbody>\n          <tr>\n            <td colSpan={6}>\n              <Box\n                flex={{alignItems: 'center', justifyContent: 'center'}}\n                style={{color: Colors.Gray500}}\n                padding={16}\n              >\n                There are no active or pending steps for this concurrency key.\n              </Box>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  }\n\n  return (\n    <Table>\n      {tableHeader}\n      <tbody style={{backgroundColor: Colors.Yellow50}}>\n        {assignedSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n      <tbody>\n        {pendingSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst PendingStepRow = ({\n  step,\n  statusByRunId,\n  onUpdate,\n}: {\n  step: ConcurrencyStepFragment;\n  statusByRunId: {[id: string]: RunStatus};\n  onUpdate: () => void;\n}) => {\n  const runStatus = statusByRunId[step.runId];\n  return (\n    <tr>\n      <td>\n        {runStatus ? (\n          <Link to={`/runs/${step.runId}`}>\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <RunStatusDot status={runStatus} size={10} />\n              <Mono>{titleForRun({id: step.runId})}</Mono>\n              {failedStatuses.has(runStatus) ? (\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Slots for canceled / failed runs can automatically be freed by configuring a run monitoring setting.\"\n                >\n                  <Icon name=\"info\" color={Colors.Gray500} />\n                </Tooltip>\n              ) : null}\n            </Box>\n          </Link>\n        ) : (\n          <Mono>{titleForRun({id: step.runId})}</Mono>\n        )}\n      </td>\n      <td>\n        <Mono>{step.stepKey}</Mono>\n      </td>\n      <td>\n        {step.assignedTimestamp ? (\n          <TimeElapsed startUnix={step.assignedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>\n        {step.enqueuedTimestamp ? (\n          <TimeElapsed startUnix={step.enqueuedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>{step.priority}</td>\n      <td>\n        <ConcurrencyActionMenu pendingStep={step} onUpdate={onUpdate} />\n      </td>\n    </tr>\n  );\n};\n\nexport const CONCURRENCY_STEP_FRAGMENT = gql`\n  fragment ConcurrencyStepFragment on PendingConcurrencyStep {\n    runId\n    stepKey\n    enqueuedTimestamp\n    assignedTimestamp\n    priority\n  }\n`;\nexport const CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    claimedSlots {\n      runId\n      stepKey\n    }\n    pendingSteps {\n      ...ConcurrencyStepFragment\n    }\n  }\n  ${CONCURRENCY_STEP_FRAGMENT}\n`;\nexport const RUN_QUEUE_CONFIG_FRAGMENT = gql`\n  fragment RunQueueConfigFragment on RunQueueConfig {\n    maxConcurrentRuns\n    tagConcurrencyLimitsYaml\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      info\n      supportsConcurrencyLimits\n      runQueuingSupported\n      runQueueConfig {\n        ...RunQueueConfigFragment\n      }\n      concurrencyLimits {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n  ${RUN_QUEUE_CONFIG_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_MUTATION = gql`\n  mutation FreeConcurrencySlots($runId: String!, $stepKey: String) {\n    freeConcurrencySlots(runId: $runId, stepKey: $stepKey)\n  }\n`;\n\nconst CONCURRENCY_KEY_DETAILS_QUERY = gql`\n  query ConcurrencyKeyDetailsQuery($concurrencyKey: String!) {\n    instance {\n      id\n      concurrencyLimit(concurrencyKey: $concurrencyKey) {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Tooltip, Spinner} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus = React.memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.Gray300} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig && flagInstanceConcurrencyLimits ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n"],"names":["InstanceConcurrencyPage","React","useTrackPageView","useDocumentTitle","flagInstanceConcurrencyLimits","useFeatureFlags","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","opConcurrencyContent","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","ConcurrencyLimits","instanceConfig","instance","info","limits","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","Redirect","to","Box","padding","vertical","Spinner","purpose","jsxs","Page","PageHeader","title","Heading","tabs","InstanceTabs","tab","margin","bottom","RunConcurrencyContent","hasRunQueue","runQueuingSupported","runQueueConfig","horizontal","border","Subheading","flex","alignItems","direction","gap","span","Tag","__webpack_exports__","param","Fragment","div","Mono","a","target","rel","href","info_content","settings_content","MetadataTableWIP","tbody","tr","td","maxConcurrentRuns","tagConcurrencyLimitsYaml","StyledRawCodeMirror","value","options","readOnly","lineNumbers","mode","action","setAction","undefined","selectedKey","setSelectedKey","onConcurrencyStepsDialogClose","limitsByKey","Object","fromEntries","map","concurrencyKey","slotCount","onAdd","actionType","onEdit","concurrencyLimit","onDelete","includes","NonIdealState","icon","description","justifyContent","Button","intent","Icon","name","onClick","length","ButtonLink","Table","thead","th","style","width","limit","pendingSteps","filter","x","assignedTimestamp","marginRight","interactive","ConcurrencyLimitActionMenu","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyStepsDialog","strong","onUpdate","Popover","content","Menu","MenuItem","text","position","isValidLimit","parseInt","isNaN","String","trim","isSubmitting","setIsSubmitting","limitInput","setLimitInput","keyInput","setKeyInput","setConcurrencyLimit","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","save","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_33__","_","variables","_state","sent","Dialog","isOpen","DialogBody","TextInput","onChange","e","placeholder","DialogFooter","disabled","ConcurrencyActionMenu","pendingStep","freeSlots","FREE_CONCURRENCY_SLOTS_MUTATION","resp","runId","stepKey","freeConcurrencySlots","showSharedToaster","message","rightIcon","CONCURRENCY_KEY_DETAILS_QUERY","skip","minWidth","maxWidth","maxHeight","grow","overflowY","PendingStepsTable","keyInfo","refresh","runIds","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_37__","Set","step","RUNS_FOR_CONCURRENCY_KEY_QUERY","statusByRunId","runs","pipelineRunsOrError","__typename","results","forEach","run","id","status","steps","sort","b","priority","enqueuedTimestamp","assignedSteps","tableHeader","Tooltip","placement","color","Colors","Gray500","backgroundColor","Yellow50","PendingStepRow","colSpan","runStatus","Link","concat","RunStatusDot","size","titleForRun","failedStatuses","has","TimeElapsed","startUnix","endUnix","CONCURRENCY_STEP_FRAGMENT","gql","CONCURRENCY_LIMIT_FRAGMENT","RUN_QUEUE_CONFIG_FRAGMENT","InstanceWarningIcon","daemons","DeploymentStatusContext","jsx_runtime","WarningTooltip","modifiers","offset","enabled","Yellow500","WorkspaceStatus","codeLocations","type","fillColor","Gray300","props","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink","QueryRefreshCountdown","INSTANCE_CONFIG_HAS_INFO","hasInfo"],"sourceRoot":""}